name: 'Upload an encrypted Build Artifact'
description: 'Upload an encrypted build artifact that can be used by subsequent workflow steps'
author: 'Verumex'
inputs:
  gpg_key:
    description: A single or list of public GPG keys to use
    required: true
  name:
    description: 'Artifact name'
    default: 'artifact'
  path:
    description: 'A file, directory or wildcard pattern that describes what to upload'
    required: true
  if-no-files-found:
    description: >
      The desired behavior if no files are found using the provided path.

      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
    default: 'warn'
  retention-days:
    description: >
      Duration after which artifact will expire in days. 0 means using default retention.

      Minimum 1 day.
      Maximum 90 days unless changed from the repository settings page.
  compression-level:
    description: >
      The level of compression for Zlib to be applied to the artifact archive.
      The value can range from 0 to 9:
      - 0: No compression
      - 1: Best speed
      - 6: Default compression (same as GNU Gzip)
      - 9: Best compression
      Higher levels will result in better compression, but will take longer to complete.
      For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
    default: '6'
  overwrite:
    description: >
      If true, an artifact with a matching name will be deleted before a new one is uploaded.
      If false, the action will fail if an artifact for the given name already exists.
      Does not fail if the artifact does not exist.
    default: 'false'
  include-hidden-files:
    description: >
      If true, hidden files will be included in the artifact.
      If false, hidden files will be excluded from the artifact.
    default: 'false'

outputs:
  artifact-id:
    description: >
      A unique identifier for the artifact that was just uploaded. Empty if the artifact upload failed.

      This ID can be used as input to other APIs to download, delete or get more information about an artifact: https://docs.github.com/en/rest/actions/artifacts
  artifact-url:
    description: >
      A download URL for the artifact that was just uploaded. Empty if the artifact upload failed.

      This download URL only works for requests Authenticated with GitHub. Anonymous downloads will be prompted to first login.
      If an anonymous download URL is needed than a short time restricted URL can be generated using the download artifact API: https://docs.github.com/en/rest/actions/artifacts#download-an-artifact

      This URL will be valid for as long as the artifact exists and the workflow run and repository exists. Once an artifact has expired this URL will no longer work.
      Common uses cases for such a download URL can be adding download links to artifacts in descriptions or comments on pull requests or issues.

runs:
  using: 'composite'
  steps:
    - name: Import GPG keys
      run: |
        echo ${{ inputs.gpg_key }} | gpg --batch --import

    - name: Encrypt artifacts
      shell: bash
      env:
        PGP_SECRET_SIGNING_PASSPHRASE: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }}
      run: |

        set -e

        # From inputs
        artifact_name="${{ inputs.name }}"
        paths="${{ inputs.path }}"
        pgp_passphrase="${PGP_SECRET_SIGNING_PASSPHRASE}"
        retention_days="${{ inputs.retention-days }}"
        if_no_files_found="${{ inputs.if-no-files-found }}"

        # Create a temporary directory to hold files for the archive
        archive_path="${{ runner.temp }}/${artifact_name}.tar"

        # Log the inputs
        echo "Creating an archive from the following paths:"
        echo "$paths"

        # Prepare include and exclude options for tar
        include_paths=""
        exclude_paths=""

        # Read each line of the multiline path input
        echo "$paths" | while read -r path; do
            if [[ $path == \!* ]]; then
                # Exclude paths starting with "!"
                exclude_paths+=" --exclude=${path:1}"
            else
                # Include paths
                include_paths+=" $path"
            fi
        done

        # Create the archive using tar, applying exclusions
        tar -cvf "$archive_path" $include_paths $exclude_paths

        # Encrypt the archive with GPG
        encrypted_archive_path="${archive_path}.gpg"
        gpg --batch --yes --symmetric --passphrase "$pgp_passphrase" --output "$encrypted_archive_path" "$archive_path"

        # Remove unencrypted archive to clean up
        rm "$archive_path"

        # Upload the encrypted archive using `actions/upload-artifact`
        echo "Uploading encrypted archive as artifact: $artifact_name"
        echo "::set-output name=archive-path::$encrypted_archive_path"

        # Move the encrypted archive to the directory to be uploaded
        mv "$encrypted_archive_path" .

    # - name: Encrypt artifacts
    #   shell: bash
    #   env:
    #     PGP_SECRET_SIGNING_PASSPHRASE: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }}
    #   run: |
    #     # Support newlines
    #     paths="${{ inputs.path }}"
    #     encrypted_directory="${{ runner.temp }}/encrypted_artifacts"
    #
    #     # Create directory for encrypted files
    #     mkdir -p $encrypted_directory
    #
    #     # Process each line of the path input
    #     echo "$paths" | while read path; do
    #       if [[ $path == \!* ]]; then
    #         # Skip excluded files
    #         continue
    #       fi
    #
    #       # Encrypt each included file
    #       for file in $(find $path -type f); do
    #         gpg --symmetric --batch --passphrase "$PGP_SECRET_SIGNING_PASSPHRASE" --output "${encrypted_directory}/${file}.enc" "$file"
    #         rm "$file"  # Remove original file
    #       done
    #     done

    # - name: Upload encrypted artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ inputs.name }}
    #     path: ${{ runner.temp }}/encrypted_artifacts/
    #     retention-days: ${{ inputs.retention-days }}
    #     if-no-files-found: ${{ inputs.if-no-files-found }}
